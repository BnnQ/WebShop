{"version":3,"sources":["..\\scss\\list.scss","list.css","..\\scss\\mixins\\_breakpoints.scss"],"names":[],"mappings":"AAEA;EACE,YAAA;EACA,YAAA;ACDF;;ACyEI;EFpEF;IACE,YAAA;ECDF;AACF;ADIA;EACE;IACE,yBAAA;ECFF;AACF;ADKA;EACE,WAAA;ACHF;;ADMA;EACE,WAAA;ACHF;;ADMA;EACE,aAAA;ACHF;;ADMA;EACE,eAAA;EACA,iBAAA;EACA,mBAAA;ACHF;;ADMA;EACE,cAAA;EACA,mBAAA;ACHF;;ADMA;EACE,eAAA;EACA,iBAAA;ACHF;;ADMA;EACE,eAAA;EACA,mBAAA;ACHF;;ADMA;EACE,yBAAA;EACA,YAAA;EACA,WAAA;EACA,kBAAA;EACA,eAAA;EACA,iBAAA;EACA,eAAA;EACA,gCAAA;ACHF;;ADMA;EACE,yBAAA;ACHF;;ADMA;EACE,wBAAA;ACHF;;ADMA;;EAEE,WAAA;EACA,UAAA;ACHF;;ADMA;EACE,UAAA;ACHF;;ADMA;EACE,WAAA;ACHF;;ADMA;EACE,eAAA;EAEA,wBAAA;EACA,sBAAA;KAAA,mBAAA;ACJF","file":"list.css","sourcesContent":["@import \"variables\";\r\n\r\n.card {\r\n  width: 320px;\r\n  margin: 20px;\r\n}\r\n\r\n@include media-breakpoint-down(xxl) {\r\n  .card {\r\n    width: 280px;\r\n  }\r\n}\r\n\r\n@media (max-width: 279px) {\r\n  .card {\r\n    flex-shrink: 1 !important;\r\n  }\r\n}\r\n\r\n.card-slider {\r\n  width: 100%;\r\n}\r\n\r\n.card-slider img {\r\n  width: 100%;\r\n}\r\n\r\n.card-body {\r\n  padding: 20px;\r\n}\r\n\r\n.card-title {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.rating {\r\n  color: #f1c40f;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.fa-star {\r\n  font-size: 10px;\r\n  margin-right: 5px;\r\n}\r\n\r\n.card-text {\r\n  font-size: 14px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.btn-success {\r\n  background-color: #2ecc71;\r\n  border: none;\r\n  color: #fff;\r\n  padding: 10px 20px;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease-in-out;\r\n}\r\n\r\n.btn-success:hover {\r\n  background-color: #27ae60;\r\n}\r\n\r\n.slick-dots {\r\n  bottom: -20px !important;\r\n}\r\n\r\n.slick-prev,\r\n.slick-next {\r\n  color: #000;\r\n  z-index: 1;\r\n}\r\n\r\n.slick-prev {\r\n  left: 10px;\r\n}\r\n\r\n.slick-next {\r\n  right: 10px;\r\n}\r\n\r\n.slick img {\r\n  cursor: pointer;\r\n\r\n  height: 200px !important;\r\n  object-fit: contain;\r\n}\r\n",".card {\n  width: 320px;\n  margin: 20px;\n}\n\n@media (max-width: 1399.98px) {\n  .card {\n    width: 280px;\n  }\n}\n@media (max-width: 279px) {\n  .card {\n    flex-shrink: 1 !important;\n  }\n}\n.card-slider {\n  width: 100%;\n}\n\n.card-slider img {\n  width: 100%;\n}\n\n.card-body {\n  padding: 20px;\n}\n\n.card-title {\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 10px;\n}\n\n.rating {\n  color: #f1c40f;\n  margin-bottom: 10px;\n}\n\n.fa-star {\n  font-size: 10px;\n  margin-right: 5px;\n}\n\n.card-text {\n  font-size: 14px;\n  margin-bottom: 10px;\n}\n\n.btn-success {\n  background-color: #2ecc71;\n  border: none;\n  color: #fff;\n  padding: 10px 20px;\n  font-size: 14px;\n  font-weight: bold;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n}\n\n.btn-success:hover {\n  background-color: #27ae60;\n}\n\n.slick-dots {\n  bottom: -20px !important;\n}\n\n.slick-prev,\n.slick-next {\n  color: #000;\n  z-index: 1;\n}\n\n.slick-prev {\n  left: 10px;\n}\n\n.slick-next {\n  right: 10px;\n}\n\n.slick img {\n  cursor: pointer;\n  height: 200px !important;\n  object-fit: contain;\n}","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}